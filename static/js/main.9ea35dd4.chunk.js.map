{"version":3,"sources":["components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","class","activeClassName","exact","to","Intro","Education","Experience","User","match","params","name","PageNotFound","App","style","fontSize","margin","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAeeA,MAXf,WACI,OACI,yBAAKC,MAAM,UACP,kBAAC,IAAD,CAASC,gBAAgB,kBAAkBC,OAAK,EAACC,GAAG,KAApD,OACA,kBAAC,IAAD,CAASF,gBAAgB,kBAAkBE,GAAG,cAA9C,aACA,kBAAC,IAAD,CAASF,gBAAgB,kBAAkBE,GAAG,eAA9C,gBCkBZ,SAASC,IACP,OACE,oDAIJ,SAASC,IACP,OACE,yCAIJ,SAASC,IACP,OACE,0CAIJ,SAASC,EAAT,GAAwB,IAATC,EAAQ,EAARA,MACb,OACE,6BACE,0CACA,uCAAaA,EAAMC,OAAOC,OAKhC,SAASC,IACP,OACE,kDAIWC,MApDf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKC,MAAO,CAACC,SAAU,MAAOC,OAAQ,SACpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOb,OAAK,EAACc,KAAK,KAChB,kBAACZ,EAAD,OAEF,kBAAC,IAAD,CAAOF,OAAK,EAACc,KAAK,aAAaC,UAAWZ,IAC1C,kBAAC,IAAD,CAAOH,OAAK,EAACc,KAAK,eAAeC,UAAWX,IAC5C,kBAAC,IAAD,CAAOU,KAAK,oBAAoBC,UAAWV,IAC3C,kBAAC,IAAD,CAAOS,KAAK,IAAIC,UAAWN,QCRjBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCTNc,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ea35dd4.chunk.js","sourcesContent":["import React from 'react';\nimport './NavBar.css';\nimport { NavLink } from 'react-router-dom';\n\nfunction NavBar() {\n    return(\n        <div class=\"navbar\">\n            <NavLink activeClassName='nav-item-active' exact to=\"/\" >Bio</NavLink>\n            <NavLink activeClassName='nav-item-active' to=\"/education\">Education</NavLink>\n            <NavLink activeClassName='nav-item-active' to=\"/experience\">Experience</NavLink>\n        </div>\n    );\n}\n\n\nexport default NavBar;","import React from 'react';\nimport {\n  Switch,\n  Route\n} from 'react-router-dom';\nimport './App.css';\nimport NavBar from './components/NavBar'\n\nfunction App() {\n  return(\n    <div>\n      <NavBar />\n      <div style={{fontSize: '3em', margin: '25px'}}>\n        <Switch>\n          <Route exact path=\"/\">\n            <Intro />\n          </Route>\n          <Route exact path=\"/education\" component={Education}></Route>\n          <Route exact path=\"/experience/\" component={Experience}></Route>\n          <Route path=\"/experience/:name\" component={User}></Route>\n          <Route path=\"/\" component={PageNotFound}></Route>\n        </Switch>\n      </div>\n    </div>\n  );  \n}\n\nfunction Intro() {\n  return(\n    <h2>Welcome to this page</h2>\n  )\n}\n\nfunction Education() {\n  return(\n    <h2>Education</h2>\n  );\n}\n\nfunction Experience() {\n  return(\n    <h2>Experience</h2>\n  );\n}\n\nfunction User({match}) {\n  return(\n    <div>\n      <h2>Experience</h2>\n      <div>Hello, {match.params.name}</div>\n    </div>\n  );\n}\n\nfunction PageNotFound() {\n  return(\n    <h2>404 Page Not Found</h2>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router\n} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}